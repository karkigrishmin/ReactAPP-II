{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,kBACNC,SAAU,eAkCCE,EAnBO,SAACC,GACrB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAKC,EAGJP,EAAaS,GAAhCP,EAHuB,EAGvBA,KAAMC,EAHiB,EAGjBA,SAOd,OACE,yBAAKS,UAAS,kBAAaH,IACzB,uBAAGG,UAAS,UAAKT,EAAL,6BACZ,4BAAKD,GACL,uBAAGU,UAAS,UAAKT,EAAL,gCCrCZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAMjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCJTG,E,4MAOJC,MAAQ,CAAEV,IAAK,KAAMW,WAAY,I,kEAGZ,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,WAAYS,EAAIb,e,sCAK3C,OAAIc,KAAKX,MAAMC,aAAeU,KAAKX,MAAMV,IAChC,uCAAaqB,KAAKX,MAAMC,aACrBU,KAAKX,MAAMC,YAAcU,KAAKX,MAAMV,IACvC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAE/B,kBAAC,EAAD,CAASO,QAAQ,qC,+BAM1B,OAAO,yBAAKF,UAAU,cAAcgB,KAAKC,qB,GA7B3BC,IAAMC,WAiCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.4fdbe47c.chunk.js","sourcesContent":["import \"./style.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\",\r\n  },\r\n  winter: {\r\n    text: \"Burr it is cold\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\n//in northern hemisphere(lat>0)- 3 to 8(summer),0 to 2 and 9 to 11(winter)\r\n//in southern hemisphere, just opposite\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\n//react component\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  // const text =\r\n  //   season === \"winter\" ? \"Burr, it is chilly\" : \"Lets hit the beach\";\r\n\r\n  // const icon = season === \"winter\" ? \"snowflake\" : \"sun\";\r\n\r\n  return (\r\n    <div className={`wrapper ${season}`}>\r\n      <i className={`${iconName} icon massive icon-left`} />\r\n      <h1>{text}</h1>\r\n      <i className={`${iconName} icon massive icon-right`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//default props in use if we forget to pass props\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\n//functional component\r\n// const App = () => {\r\n//   return <div>Hii there</div>;\r\n// };\r\n\r\n//Class component\r\nclass App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = { lat: null, errMessage: \"\" };\r\n  // }\r\n\r\n  //state initialization\r\n  state = { lat: null, errMessage: \"\" };\r\n\r\n  //component lifecycle methods\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ lat: position.coords.latitude }),\r\n      (err) => this.setState({ errMessage: err.message })\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    if (this.state.errMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errMessage}</div>;\r\n    } else if (!this.state.errMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    } else {\r\n      return <Spinner message=\"Please accept location request\" />;\r\n    }\r\n  }\r\n\r\n  //React says we have to define render!!!!\r\n  render() {\r\n    return <div className=\"border red\">{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}